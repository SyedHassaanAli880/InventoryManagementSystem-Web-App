// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using InventoryManagementSystem.Models;

namespace InventoryManagementSystem.Data
{
    public partial class AppDBContext : DbContext
    {
        public AppDBContext()
        {
        }

        public AppDBContext(DbContextOptions<AppDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<ProductPrices> ProductPrices { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<PurchaseInvoiceDetails> PurchaseInvoiceDetails { get; set; }
        public virtual DbSet<PurchaseInvoices> PurchaseInvoices { get; set; }
        public virtual DbSet<SaleDetails> SaleDetails { get; set; }
        public virtual DbSet<Sales> Sales { get; set; }
        public virtual DbSet<Stocks> Stocks { get; set; }
        public virtual DbSet<Suppliers> Suppliers { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-PAESO76\\MSSQLSERVER01;Initial Catalog=InvDB;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ProductPrices>(entity =>
            {
                entity.HasOne(d => d.ProdPriceProduct)
                    .WithMany(p => p.ProductPrices)
                    .HasForeignKey(d => d.ProdPriceProductId)
                    .HasConstraintName("FK_ProductPrices_Products");
            });

            modelBuilder.Entity<Products>(entity =>
            {
                entity.HasOne(d => d.Cat)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.CatId)
                    .HasConstraintName("FK_Products_Categories");
            });

            modelBuilder.Entity<PurchaseInvoiceDetails>(entity =>
            {
                entity.HasOne(d => d.PidpurchaseInvoice)
                    .WithMany(p => p.PurchaseInvoiceDetails)
                    .HasForeignKey(d => d.PidpurchaseInvoiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PurchaseInvoiceDetails_PurchaseInvoices");
            });

            modelBuilder.Entity<SaleDetails>(entity =>
            {
                entity.Property(e => e.SalDetId).ValueGeneratedOnAdd();

                entity.HasOne(d => d.SalDet)
                    .WithOne(p => p.SaleDetails)
                    .HasForeignKey<SaleDetails>(d => d.SalDetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SaleDetails_Sales");
            });

            modelBuilder.Entity<Stocks>(entity =>
            {
                entity.HasKey(e => e.StockId)
                    .HasName("PK_Stocks_1");
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}